!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
KINEMATICSMODEL_H	InverseKinematic/kinematicsmodel.h	2;"	d
KinematicsModel	InverseKinematic/kinematicsmodel.cpp	/^KinematicsModel::KinematicsModel(QOpenGLShaderProgram &program)$/;"	f	class:KinematicsModel
KinematicsModel	InverseKinematic/kinematicsmodel.h	/^class KinematicsModel : protected QOpenGLFunctions$/;"	c
KinematicsWidget	InverseKinematic/kinematicswidget.cpp	/^KinematicsWidget::KinematicsWidget(QWidget *parent)$/;"	f	class:KinematicsWidget
KinematicsWidget	InverseKinematic/kinematicswidget.h	/^class KinematicsWidget : public QOpenGLWidget, protected QOpenGLFunctions$/;"	c
KinematicsWidget_H	InverseKinematic/kinematicswidget.h	2;"	d
Linkage	InverseKinematic/kinematicsmodel.h	/^} Linkage;$/;"	t	typeref:struct:__anon1
MAINWINDOW_H	InverseKinematic/mainwindow.h	2;"	d
MainWindow	InverseKinematic/mainwindow.cpp	/^MainWindow::MainWindow(QWidget *parent) :$/;"	f	class:MainWindow
MainWindow	InverseKinematic/mainwindow.h	/^class MainWindow : public QMainWindow$/;"	c
NormalColor	InverseKinematic/kinematicsmodel.cpp	/^QVector3D const KinematicsModel::NormalColor = QVector3D(0, 0, 0);$/;"	m	class:KinematicsModel	file:
NormalColor	InverseKinematic/kinematicsmodel.h	/^    const static QVector3D NormalColor;$/;"	m	class:KinematicsModel
Q_DECL_OVERRIDE	InverseKinematic/kinematicswidget.h	/^    void initializeGL() Q_DECL_OVERRIDE;$/;"	m	class:KinematicsWidget
Q_DECL_OVERRIDE	InverseKinematic/kinematicswidget.h	/^    void mouseReleaseEvent(QMouseEvent *) Q_DECL_OVERRIDE;$/;"	m	class:KinematicsWidget
Q_DECL_OVERRIDE	InverseKinematic/kinematicswidget.h	/^    void paintGL() Q_DECL_OVERRIDE;$/;"	m	class:KinematicsWidget
Q_DECL_OVERRIDE	InverseKinematic/kinematicswidget.h	/^    void resizeGL(int, int) Q_DECL_OVERRIDE;$/;"	m	class:KinematicsWidget
SelectedColor	InverseKinematic/kinematicsmodel.cpp	/^QVector3D  const KinematicsModel::SelectedColor = QVector3D(1, 0, 0);$/;"	m	class:KinematicsModel	file:
SelectedColor	InverseKinematic/kinematicsmodel.h	/^    const static QVector3D SelectedColor;$/;"	m	class:KinematicsModel
Ui	InverseKinematic/mainwindow.h	/^namespace Ui {$/;"	n
angle	InverseKinematic/kinematicsmodel.h	/^    float angle;$/;"	m	struct:__anon1
animationTimer	InverseKinematic/mainwindow.h	/^    QTimer animationTimer;$/;"	m	class:MainWindow
animationTimerFired	InverseKinematic/mainwindow.cpp	/^void MainWindow::animationTimerFired(){$/;"	f	class:MainWindow
currentLinkage	InverseKinematic/kinematicsmodel.cpp	/^Linkage &KinematicsModel::currentLinkage(){$/;"	f	class:KinematicsModel
doPaint	InverseKinematic/kinematicsmodel.cpp	/^void KinematicsModel::doPaint(){$/;"	f	class:KinematicsModel
fps	InverseKinematic/mainwindow.h	/^    int fps;$/;"	m	class:MainWindow
getAngle	InverseKinematic/mainwindow.cpp	/^float MainWindow::getAngle(){$/;"	f	class:MainWindow
getPositions	InverseKinematic/kinematicsmodel.cpp	/^QList<QVector2D> KinematicsModel::getPositions(){$/;"	f	class:KinematicsModel
init	InverseKinematic/kinematicsmodel.cpp	/^void KinematicsModel::init(){$/;"	f	class:KinematicsModel
initializeGL	InverseKinematic/kinematicswidget.cpp	/^void KinematicsWidget::initializeGL(){$/;"	f	class:KinematicsWidget
inverseKinematics	InverseKinematic/kinematicsmodel.cpp	/^void KinematicsModel::inverseKinematics(QVector2D &pos){$/;"	f	class:KinematicsModel
kinematicModel	InverseKinematic/kinematicswidget.h	/^    KinematicsModel kinematicModel;$/;"	m	class:KinematicsWidget
len	InverseKinematic/kinematicsmodel.h	/^    float len;$/;"	m	struct:__anon1
linkages	InverseKinematic/kinematicsmodel.h	/^    QList<Linkage> linkages;$/;"	m	class:KinematicsModel
main	InverseKinematic/main.cpp	/^int main(int argc, char *argv[])$/;"	f
mouseReleaseEvent	InverseKinematic/kinematicswidget.cpp	/^void KinematicsWidget::mouseReleaseEvent(QMouseEvent *event){$/;"	f	class:KinematicsWidget
nextAnimation	InverseKinematic/kinematicsmodel.cpp	/^void KinematicsModel::nextAnimation(int fps){$/;"	f	class:KinematicsModel
nextLinkage	InverseKinematic/kinematicsmodel.cpp	/^void KinematicsModel::nextLinkage(){$/;"	f	class:KinematicsModel
on_animateCheckBox_clicked	InverseKinematic/mainwindow.cpp	/^void MainWindow::on_animateCheckBox_clicked(bool checked)$/;"	f	class:MainWindow
on_applyButton_clicked	InverseKinematic/mainwindow.cpp	/^void MainWindow::on_applyButton_clicked()$/;"	f	class:MainWindow
on_minusAngleButton_clicked	InverseKinematic/mainwindow.cpp	/^void MainWindow::on_minusAngleButton_clicked()$/;"	f	class:MainWindow
on_nextLinkageButton_clicked	InverseKinematic/mainwindow.cpp	/^void MainWindow::on_nextLinkageButton_clicked()$/;"	f	class:MainWindow
on_plusAngleButton_clicked	InverseKinematic/mainwindow.cpp	/^void MainWindow::on_plusAngleButton_clicked()$/;"	f	class:MainWindow
on_speedDownButton_clicked	InverseKinematic/mainwindow.cpp	/^void MainWindow::on_speedDownButton_clicked()$/;"	f	class:MainWindow
on_speedUpButton_clicked	InverseKinematic/mainwindow.cpp	/^void MainWindow::on_speedUpButton_clicked()$/;"	f	class:MainWindow
paintGL	InverseKinematic/kinematicswidget.cpp	/^void KinematicsWidget::paintGL(){$/;"	f	class:KinematicsWidget
pmMatrix	InverseKinematic/kinematicswidget.h	/^    QMatrix4x4 pmMatrix;$/;"	m	class:KinematicsWidget
program	InverseKinematic/kinematicsmodel.h	/^    QOpenGLShaderProgram &program;$/;"	m	class:KinematicsModel
program	InverseKinematic/kinematicswidget.h	/^    QOpenGLShaderProgram program;$/;"	m	class:KinematicsWidget
resizeGL	InverseKinematic/kinematicswidget.cpp	/^void KinematicsWidget::resizeGL(int w, int h){$/;"	f	class:KinematicsWidget
selectedLinkageIndex	InverseKinematic/kinematicsmodel.h	/^    int selectedLinkageIndex;$/;"	m	class:KinematicsModel
speed	InverseKinematic/kinematicsmodel.h	/^    float speed; \/\/angle per min$/;"	m	struct:__anon1
startPoint	InverseKinematic/kinematicsmodel.h	/^    QVector2D startPoint;$/;"	m	class:KinematicsModel
ui	InverseKinematic/mainwindow.h	/^    Ui::MainWindow *ui;$/;"	m	class:MainWindow
updateSpeedLabel	InverseKinematic/mainwindow.cpp	/^void MainWindow::updateSpeedLabel(){$/;"	f	class:MainWindow
widgetToGL	InverseKinematic/kinematicswidget.cpp	/^QVector2D KinematicsWidget::widgetToGL(QPoint pos){$/;"	f	class:KinematicsWidget
~MainWindow	InverseKinematic/mainwindow.cpp	/^MainWindow::~MainWindow()$/;"	f	class:MainWindow
